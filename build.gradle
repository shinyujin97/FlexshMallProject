buildscript {
	ext {
		queryDslVersion = "5.0.0" // querydsl 버전
	}
}

// 플러그인 섹션: 프로젝트에 필요한 플러그인들을 정의.
plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.16'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.javalab'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '11'
}

configurations {
	compileOnly {
		// annotationProcessor 구성에 추가된 의존성들이
		// compileOnly 구성에도 적용됨. 예를들면 dependencies
		// 부분의 annotationProcessor 'org.projectlombok:lombok'
		// 롬복은 다양한 어노테이션을 갖고 있는 이 어노테이션들은
		// 컴파일 타임에 처리되어 추가적인 코드를 생성하거나
		// 기존 코드를 변경하는 작업을 수행하게 됨.
		extendsFrom annotationProcessor
	}
}
// 저장소 섹션: 의존성 download 받을 외부 저장소.
repositories {
	mavenCentral()
}

dependencies {
	// Spring Boot 에서 웹 MVC 패턴 개발 관련 의존성
	// 1. 내장 톰캣 제공
	// 2. Spring MVC 웹 앱 위한 framework 제공
	//   Controller, Service, Repository 등의 구성 요소를 쉽게 개발
	//   @RestController, @RequestMapping 등의 Annotation 사용
	// 3. Jackson : JSON To Java 객체, 자바 객체 To Json 변환
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// 스프링 data jpa 관련 의존성
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// jsp 역할을 하는 thymeleaf template engine 의존성
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

	// 스프링 테스트 관련
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// 롬복
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	// Test Case 에서 롬복 사용
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	// DevTools
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// mariadb driver
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

	// thymeleaf template layout 관련 의존성
	implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.2.1'

	// SQL 로그 의존성
	implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'

	// Dto To Entity 변환
	implementation group: 'org.modelmapper', name: 'modelmapper', version: '3.0.0'

	// validation
	implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.2.1.Final'

	//	이메일
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	// Swagger
//	implementation 'io.springfox:springfox-boot-starter:3.0.0'
//	implementation 'io.springfox:springfox-swagger-ui:3.0.0'

	// AOP
//	implementation 'org.springframework.boot:spring-boot-starter'
//	implementation 'org.springframework.boot:spring-boot-starter-aop'
//	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// Thumbnail
	implementation 'net.coobird:thumbnailator:0.4.16'

	// 스프링 시큐리티
	implementation 'org.springframework.boot:spring-boot-starter-security'
	// 타임리프에서 시큐리티 사용
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
	// 소셜 로그인
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	// QueryDsl 관련
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	annotationProcessor(
			"javax.persistence:javax.persistence-api",
			"javax.annotation:javax.annotation-api",
			"com.querydsl:querydsl-apt:${queryDslVersion}:jpa")
}

// 테스트 태스크 설정: JUnit Platform을 사용하여 테스트를 실행.
tasks.named('test') {
	useJUnitPlatform()
}

// QueryDsl QDomain 생성 위치
sourceSets {
	main {
		java {
			srcDirs = ["$projectDir/src/main/java", "$projectDir/build/generated"]
		}
	}
}
